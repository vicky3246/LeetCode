3319. K-th Largest Perfect Subtree Size in Binary Tree =>


              record Pair(boolean isPerSub, int count){};
              class Solution {
                  public int kthLargestPerfectSubtree(TreeNode root, int k) {
                      List<Integer> ans=new ArrayList<>();
                      dfs(root, ans);
                      Collections.sort(ans, Collections.reverseOrder());
                      return ans.size()<k ? -1:ans.get(k-1);
                  }
              
                  public Pair dfs(TreeNode root, List<Integer> ans){
                      if(root==null){
                          return new Pair(true, 0);
                      }
              
                      Pair l = dfs(root.left, ans);
                      Pair r = dfs(root.right, ans);
              
                      if(l.isPerSub() && r.isPerSub() && l.count()==r.count() ){
                          ans.add(1+l.count()+r.count());
                          return new Pair(true, 1+l.count()+r.count());
                      }
                      return new Pair(false, 0);
                  }
              }
